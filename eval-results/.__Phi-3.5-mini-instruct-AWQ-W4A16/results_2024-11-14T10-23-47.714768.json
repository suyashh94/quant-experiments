{
  "results": {
    "gsm8k": {
      "alias": "gsm8k",
      "exact_match,strict-match": 0.752,
      "exact_match_stderr,strict-match": 0.019332342821239103,
      "exact_match,flexible-extract": 0.758,
      "exact_match_stderr,flexible-extract": 0.019173085678337164
    },
    "hellaswag": {
      "alias": "hellaswag",
      "acc,none": 0.512,
      "acc_stderr,none": 0.02237662679792717,
      "acc_norm,none": 0.662,
      "acc_norm_stderr,none": 0.021175665695209407
    },
    "lambada_openai": {
      "alias": "lambada_openai",
      "perplexity,none": 6.956150785965232,
      "perplexity_stderr,none": 0.6408453685294752,
      "acc,none": 0.592,
      "acc_stderr,none": 0.022000910893877186
    },
    "openbookqa": {
      "alias": "openbookqa",
      "acc,none": 0.402,
      "acc_stderr,none": 0.021948929609938612,
      "acc_norm,none": 0.498,
      "acc_norm_stderr,none": 0.022382894986483524
    },
    "piqa": {
      "alias": "piqa",
      "acc,none": 0.786,
      "acc_stderr,none": 0.018359797502387,
      "acc_norm,none": 0.806,
      "acc_norm_stderr,none": 0.017701827855304633
    },
    "truthfulqa_mc1": {
      "alias": "truthfulqa_mc1",
      "acc,none": 0.366,
      "acc_stderr,none": 0.02156427685020162
    },
    "winogrande": {
      "alias": "winogrande",
      "acc,none": 0.724,
      "acc_stderr,none": 0.02001121929807353
    }
  },
  "group_subtasks": {
    "gsm8k": [],
    "hellaswag": [],
    "lambada_openai": [],
    "openbookqa": [],
    "piqa": [],
    "truthfulqa_mc1": [],
    "winogrande": []
  },
  "configs": {
    "gsm8k": {
      "task": "gsm8k",
      "tag": [
        "math_word_problems"
      ],
      "dataset_path": "gsm8k",
      "dataset_name": "main",
      "training_split": "train",
      "test_split": "test",
      "fewshot_split": "train",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{answer}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": false,
          "regexes_to_ignore": [
            ",",
            "\\$",
            "(?s).*#### ",
            "\\.$"
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "strict-match",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "#### (\\-?[0-9\\.\\,]+)"
            },
            {
              "function": "take_first"
            }
          ]
        },
        {
          "name": "flexible-extract",
          "filter": [
            {
              "function": "regex",
              "group_select": -1,
              "regex_pattern": "(-?[$0-9.,]{2,})|(-?[0-9]+)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 3.0
      }
    },
    "hellaswag": {
      "task": "hellaswag",
      "tag": [
        "multiple_choice"
      ],
      "dataset_path": "hellaswag",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "lambada_openai": {
      "task": "lambada_openai",
      "tag": [
        "lambada"
      ],
      "dataset_path": "EleutherAI/lambada_openai",
      "dataset_name": "default",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "doc_to_text": "{{text.split(' ')[:-1]|join(' ')}}",
      "doc_to_target": "{{' '+text.split(' ')[-1]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "perplexity",
          "aggregation": "perplexity",
          "higher_is_better": false
        },
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{text}}",
      "metadata": {
        "version": 1.0
      }
    },
    "openbookqa": {
      "task": "openbookqa",
      "dataset_path": "openbookqa",
      "dataset_name": "main",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "question_stem",
      "doc_to_target": "{{choices.label.index(answerKey.lstrip())}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question_stem",
      "metadata": {
        "version": 1.0
      }
    },
    "piqa": {
      "task": "piqa",
      "dataset_path": "piqa",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Question: {{goal}}\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": "{{[sol1, sol2]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "goal",
      "metadata": {
        "version": 1.0
      }
    },
    "truthfulqa_mc1": {
      "task": "truthfulqa_mc1",
      "tag": [
        "truthfulqa"
      ],
      "dataset_path": "truthful_qa",
      "dataset_name": "multiple_choice",
      "validation_split": "validation",
      "doc_to_text": "{% set prompt_qa = 'Q: What is human life expectancy in the United States?\nA: Human life expectancy in the United States is 78 years.\n\nQ: Who was president of the United States in 1955?\nA: Dwight D. Eisenhower was president of the United States in 1955.\n\nQ: Which party did he belong to?\nA: He belonged to the Republican Party.\n\nQ: What is the square root of banana?\nA: I have no comment.\n\nQ: How does a telescope work?\nA: Telescopes use lenses or mirrors to focus light and make objects appear closer.\n\nQ: Where were the 1992 Olympics held?\nA: The 1992 Olympics were held in Barcelona, Spain.'%}{{prompt_qa + '\n\nQ: ' + question + '\nA:'}}",
      "doc_to_target": 0,
      "doc_to_choice": "{{mc1_targets.choices}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question",
      "metadata": {
        "version": 2.0
      }
    },
    "winogrande": {
      "task": "winogrande",
      "dataset_path": "winogrande",
      "dataset_name": "winogrande_xl",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def doc_to_text(doc):\n    answer_to_num = {\"1\": 0, \"2\": 1}\n    return answer_to_num[doc[\"answer\"]]\n",
      "doc_to_target": "def doc_to_target(doc):\n    idx = doc[\"sentence\"].index(\"_\") + 1\n    return doc[\"sentence\"][idx:].strip()\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    idx = doc[\"sentence\"].index(\"_\")\n    options = [doc[\"option1\"], doc[\"option2\"]]\n    return [doc[\"sentence\"][:idx] + opt for opt in options]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "sentence",
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "gsm8k": 3.0,
    "hellaswag": 1.0,
    "lambada_openai": 1.0,
    "openbookqa": 1.0,
    "piqa": 1.0,
    "truthfulqa_mc1": 2.0,
    "winogrande": 1.0
  },
  "n-shot": {
    "gsm8k": 5,
    "hellaswag": 5,
    "lambada_openai": 5,
    "openbookqa": 5,
    "piqa": 5,
    "truthfulqa_mc1": 0,
    "winogrande": 5
  },
  "higher_is_better": {
    "gsm8k": {
      "exact_match": true
    },
    "hellaswag": {
      "acc": true,
      "acc_norm": true
    },
    "lambada_openai": {
      "perplexity": false,
      "acc": true
    },
    "openbookqa": {
      "acc": true,
      "acc_norm": true
    },
    "piqa": {
      "acc": true,
      "acc_norm": true
    },
    "truthfulqa_mc1": {
      "acc": true
    },
    "winogrande": {
      "acc": true
    }
  },
  "n-samples": {
    "winogrande": {
      "original": 1267,
      "effective": 500
    },
    "truthfulqa_mc1": {
      "original": 817,
      "effective": 500
    },
    "piqa": {
      "original": 1838,
      "effective": 500
    },
    "openbookqa": {
      "original": 500,
      "effective": 500
    },
    "lambada_openai": {
      "original": 5153,
      "effective": 500
    },
    "hellaswag": {
      "original": 10042,
      "effective": 500
    },
    "gsm8k": {
      "original": 1319,
      "effective": 500
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=./Phi-3.5-mini-instruct-AWQ-W4A16,add_bos_token=true",
    "batch_size": "2",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": 500.0,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "be40c7d",
  "date": 1731579174.6935024,
  "pretty_env_info": "PyTorch version: 2.4.0+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 20.04.6 LTS (x86_64)\nGCC version: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nClang version: Could not collect\nCMake version: version 3.28.0\nLibc version: glibc-2.31\n\nPython version: 3.10.14 (main, May  6 2024, 19:42:50) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-5.15.0-1074-azure-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100 80GB PCIe\nGPU 1: NVIDIA A100 80GB PCIe\nGPU 2: NVIDIA A100 80GB PCIe\nGPU 3: NVIDIA A100 80GB PCIe\n\nNvidia driver version: 535.216.01\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_adv.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_engines_precompiled.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_engines_runtime_compiled.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_graph.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_heuristic.so.9.5.1\n/usr/lib/x86_64-linux-gnu/libcudnn_ops.so.9.5.1\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nByte Order:                           Little Endian\nAddress sizes:                        48 bits physical, 48 bits virtual\nCPU(s):                               96\nOn-line CPU(s) list:                  0-95\nThread(s) per core:                   1\nCore(s) per socket:                   48\nSocket(s):                            2\nNUMA node(s):                         4\nVendor ID:                            AuthenticAMD\nCPU family:                           25\nModel:                                1\nModel name:                           AMD EPYC 7V13 64-Core Processor\nStepping:                             1\nCPU MHz:                              2445.442\nBogoMIPS:                             4890.88\nHypervisor vendor:                    Microsoft\nVirtualization type:                  full\nL1d cache:                            3 MiB\nL1i cache:                            3 MiB\nL2 cache:                             48 MiB\nL3 cache:                             384 MiB\nNUMA node0 CPU(s):                    0-23\nNUMA node1 CPU(s):                    24-47\nNUMA node2 CPU(s):                    48-71\nNUMA node3 CPU(s):                    72-95\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Mitigation; safe RET, no microcode\nVulnerability Spec store bypass:      Vulnerable\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Retpolines; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl tsc_reliable nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext perfctr_core invpcid_single vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves clzero xsaveerptr rdpru arat umip vaes vpclmulqdq rdpid fsrm\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] onnxruntime-gpu==1.19.2\n[pip3] optree==0.12.1\n[pip3] torch==2.4.0\n[pip3] torch-tb-profiler==0.4.3\n[pip3] torchaudio==2.5.1\n[pip3] torchvision==0.19.0\n[pip3] triton==3.0.0\n[conda] numpy                     1.26.4                   pypi_0    pypi\n[conda] optree                    0.12.1                   pypi_0    pypi\n[conda] torch                     2.4.0                    pypi_0    pypi\n[conda] torch-tb-profiler         0.4.3                    pypi_0    pypi\n[conda] torchaudio                2.5.1                    pypi_0    pypi\n[conda] torchvision               0.19.0                   pypi_0    pypi\n[conda] triton                    3.0.0                    pypi_0    pypi",
  "transformers_version": "4.45.2",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "32000"
  ],
  "tokenizer_eos_token": [
    "<|endoftext|>",
    "32000"
  ],
  "tokenizer_bos_token": [
    "<s>",
    "1"
  ],
  "eot_token_id": 32000,
  "max_length": 131072,
  "task_hashes": {},
  "model_source": "vllm",
  "model_name": "./Phi-3.5-mini-instruct-AWQ-W4A16",
  "model_name_sanitized": ".__Phi-3.5-mini-instruct-AWQ-W4A16",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 176315.367314691,
  "end_time": 176975.040171216,
  "total_evaluation_time_seconds": "659.6728565250232"
}